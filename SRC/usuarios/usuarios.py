import json
import os
import re

#En este modulo esta lo siguiente:
# - Cargar y guardar usuarios desde un archivo JSON
# - Verificar credenciales de usuario
# - Iniciar sesi√≥n
# - Registrar nuevos usuarios con validaciones nuevas
# - Cambiar contrase√±a de usuario


usuario = {}

USUARIOS = os.path.join("data", "usuarios.json")


# ------------------------------------------

def cargar_usuarios():
    global usuario
    if os.path.exists(USUARIOS):
        with open(USUARIOS, "r") as archivo:
            usuario = json.load(archivo)
    else:
        usuario = {}

# ------------------------------------------

def guardar_usuarios():
    with open(USUARIOS, "w") as archivo:
        json.dump(usuario, archivo, indent=4)


# ------------------------------------------

def verificar_credenciales(email, contrase√±a):
    return email in usuario and usuario[email]["contrase√±a"] == contrase√±a


# ------------------------------------------

def iniciar_sesion(email, contrase√±a):
    if email in usuario:
        if usuario[email]["contrase√±a"] == contrase√±a:
            nombre = usuario[email]["nombre"]
            categoria = usuario[email]["categoria"]
            print(f"Bienvenido, {nombre}! Rol: {categoria}")
            return categoria  # üîß Retorna la categor√≠a
        else:
            print("‚ùå Error: Contrase√±a incorrecta.")
    else:
        print("‚ùå Error: No existe ning√∫n usuario con ese email.")
    return False

 # funcion de registro de usuario modificada con atributo categoria de usuario y mejora en validaciones de registro
def registrar_usuario(nombre, email, contrase√±a, categoria):
    categoria = categoria.lower()
    if categoria not in ["administrador", "usuario"]:
        print("‚ùå Error: Categor√≠a inv√°lida. Debe ser 'administrador' o 'usuario'.")
        return

    # Validar formato email
    patron_email = r'^[\w\.-]+@[\w\.-]+\.\w+$'  # ejemplo: abc@gmail.com
    if not re.match(patron_email, email):
        print("‚ùå Error: Email inv√°lido, debe ser abcd@gmail.com por ejemplo.")
        return
    
    # Exigir m√≠nimo 8 caracteres en contrase√±a
    if len(contrase√±a) <= 8:
        print("‚ùå Error: La contrase√±a debe tener m√°s de 8 caracteres.")
        return
    
    # Validar que la contrase√±a tenga may√∫scula, n√∫mero y car√°cter especial
    patron_contrase√±a = r'^(?=.*[A-Z])(?=.*\d)(?=.*[!@#$%^&*()_\-+=\[\]{};:\'",.<>?/\\|])\S+$'
    if not re.match(patron_contrase√±a, contrase√±a):
        print("‚ùå Error: La contrase√±a debe contener al menos una letra may√∫scula, un n√∫mero, un car√°cter especial y no debe incluir espacios en blanco.")
        return

    # Normalizar nombre a min√∫sculas para evitar errores en la base de datos
    nombre = nombre.lower()

    if email in usuario:
        print("‚ùå Error: Ya existe un usuario con ese email.")
    else:
        usuario[email] = {
            "nombre": nombre,
            "contrase√±a": contrase√±a,
            "categoria": categoria
        }
        print(f"‚úÖ Usuario '{nombre}' registrado correctamente como {categoria}.")
        guardar_usuarios()

   
# ------------------------------------------

def cambiar_contrase√±a(email, nueva_contrase√±a):
    if email in usuario:
        usuario[email]["contrase√±a"] = nueva_contrase√±a
        print("üîê Contrase√±a cambiada correctamente.")
        guardar_usuarios()
    else:
        print("‚ùå Error: No se encontr√≥ ning√∫n usuario con ese email.")

# ------------------------------------------


def buscar_usuario(email):
    if email in usuario:
        datos = usuario[email]
        print(f"üîç Usuario encontrado: {datos['nombre']} ({email}) - Rol: {datos['categoria']}")
    else:
        print("‚ùå No se encontr√≥ ning√∫n usuario con ese email.")





def eliminar_usuario(email, contrase√±a):
    if email in usuario:
        if usuario[email]["contrase√±a"] == contrase√±a:
            nombre = usuario[email]["nombre"]
            del usuario[email]
            print(f"‚úÖ Usuario '{nombre}' eliminado correctamente.")
            guardar_usuarios()
            return True
        else:
            print("‚ùå Error: La contrase√±a no es correcta.")
    else:
        print("‚ùå Error: No se encontr√≥ ning√∫n usuario con ese email.")
    return False







def listar_usuarios():
    if usuario:
        print("\nüìã Lista de usuarios:")
        for email, datos in usuario.items():
            print(f" - {datos['nombre']} ({email}) - Rol: {datos['categoria']}")
    else:
        print("‚ÑπÔ∏è No hay usuarios registrados.")
